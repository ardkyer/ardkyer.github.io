---
layout: post
title: "블로그 추천시스템 성능 개선 프로젝트1"
date: 2025-06-23
typora-root-url: ../
image_style: "max-width:80%; display:block; margin:1em auto; border-radius:10px; box-shadow:2px 2px 8px rgba(0,0,0,0.8);"
---

# 📊 블로그 추천시스템 성능 개선 프로젝트

## 🎯 프로젝트 개요

**목표**: 기존 블로그 추천시스템을 분석하고, 3가지 다른 방법론으로 개선하여 성능 지표 비교 분석

### 📈 비교 대상 모델들

1. **Baseline (현재 시스템)**: 태그/카테고리 기반 단순 매칭
2. **Custom ML Model**: TF-IDF + 코사인 유사도 + 시간 가중치
3. **Gemini API Model**: LLM 기반 컨텍스트 이해 추천
4. **Hybrid Model**: Custom + Gemini 앙상블

------

## 🔍 성능 지표 (KPI)

### 1. 정량적 지표

- **관련성 점수** (Relevance Score): 1-5점 척도
- **다양성 지수** (Diversity): 추천 게시물 카테고리 분산도
- **응답 시간** (Response Time): 추천 생성 속도
- **커버리지** (Coverage): 전체 게시물 중 추천된 비율
- **신선도** (Freshness): 최신 게시물 추천 비율

### 2. 정성적 지표

- **의미적 연관성**: 내용의 실제 관련도
- **사용자 만족도**: 클릭률, 체류시간 (시뮬레이션)
- **추천 이유 품질**: 설명의 구체성

### 3. 기술적 지표

- **처리량** (Throughput): 초당 추천 요청 처리 수
- **확장성** (Scalability): 데이터셋 크기 증가 대응
- **비용 효율성**: API 호출 비용 vs 성능

------

## 🏗️ 시스템 아키텍처

```mermaid
graph TB
    A[Blog Posts Data] --> B[Data Preprocessing]
    B --> C[Feature Engineering]
    C --> D[Model Training/API Setup]
    
    D --> E1[Baseline Model]
    D --> E2[Custom ML Model]
    D --> E3[Gemini API Model]
    D --> E4[Hybrid Model]
    
    E1 --> F[Recommendation Engine]
    E2 --> F
    E3 --> F
    E4 --> F
    
    F --> G[Evaluation Pipeline]
    G --> H[Performance Dashboard]
    
    I[Airflow Scheduler] --> J[Daily Model Update]
    I --> K[Performance Monitoring]
    I --> L[A/B Testing]
```

------

## 🔄 Airflow 활용 방안

### 1. **데이터 파이프라인**

```python
# DAG: daily_recommendation_pipeline
- extract_new_posts()          # 새 게시물 수집
- preprocess_content()         # 텍스트 전처리
- update_embeddings()          # 벡터 임베딩 업데이트
- retrain_models()             # 모델 재학습
- generate_recommendations()   # 추천 생성
- evaluate_performance()       # 성능 평가
- update_dashboard()           # 대시보드 업데이트
```

### 2. **A/B 테스트 자동화**

```python
# DAG: ab_testing_pipeline
- split_users()               # 사용자 그룹 분할
- serve_recommendations_a()   # 그룹 A: 기존 모델
- serve_recommendations_b()   # 그룹 B: 새 모델
- collect_metrics()           # 지표 수집
- statistical_analysis()     # 통계적 유의성 검증
- generate_report()           # 결과 리포트 생성
```

### 3. **모니터링 & 알림**

```python
# DAG: monitoring_pipeline
- check_model_drift()         # 모델 성능 저하 감지
- monitor_api_costs()         # API 비용 모니터링
- validate_recommendations()  # 추천 품질 검증
- send_alerts()              # 이상 상황 알림
```

------

## 📊 실험 설계

### Phase 1: 기준선 설정 (1주)

1. 현재 시스템 성능 측정
2. 평가 데이터셋 구축
3. 지표 기준값 설정

### Phase 2: 모델 개발 (2주)

1. **Custom ML Model**
   - TF-IDF 벡터화
   - 코사인 유사도 계산
   - 시간 가중치 적용
   - 카테고리 다양성 보정
2. **Gemini API Model**
   - 프롬프트 엔지니어링
   - 배치 처리 최적화
   - 비용 효율성 개선

### Phase 3: 평가 & 최적화 (1주)

1. 교차 검증 실시
2. 하이퍼파라미터 튜닝
3. 앙상블 모델 구축

### Phase 4: 배포 & 모니터링 (진행중)

1. Airflow 파이프라인 구축
2. 실시간 A/B 테스트
3. 성능 대시보드 구축

------

## 💻 기술 스택

### 데이터 처리 & ML

- **Python**: 주 개발 언어
- **scikit-learn**: 머신러닝 모델
- **NLTK/spaCy**: 자연어 처리
- **pandas/numpy**: 데이터 처리

### API & 클라우드

- **Google Gemini API**: LLM 추천
- **FastAPI**: 추천 서빙 API
- **Redis**: 캐싱 레이어
- **PostgreSQL**: 메트릭 저장

### 오케스트레이션 & 모니터링

- **Apache Airflow**: 워크플로우 관리
- **Grafana**: 성능 대시보드
- **Prometheus**: 메트릭 수집
- **Docker**: 컨테이너화

### 웹 & 프론트엔드

- **Jekyll**: 블로그 플랫폼
- **JavaScript**: 클라이언트 추천 로직
- **Chart.js**: 성능 시각화

------

## 📈 예상 성과 지표

### 정량적 개선 목표

| 지표        | Baseline | Custom ML | Gemini API | 목표 개선율   |
| ----------- | -------- | --------- | ---------- | ------------- |
| 관련성 점수 | 2.1/5    | 3.5/5     | 4.2/5      | **+100%**     |
| 다양성 지수 | 0.3      | 0.7       | 0.8        | **+167%**     |
| 응답시간    | 50ms     | 120ms     | 800ms      | 상황별 최적화 |
| 커버리지    | 15%      | 45%       | 60%        | **+300%**     |

### 정성적 개선 기대효과

- **의미적 연관성**: 단순 키워드 → 맥락 이해
- **추천 이유**: "태그 유사성" → 구체적 설명
- **사용자 경험**: 무작위 추천 → 개인화된 추천

------

## 🚀 구현 우선순위

### Week 1-2: 기초 구축

1. ✅ 현재 시스템 분석 완료
2. 📊 평가 데이터셋 구축
3. 🔧 Custom ML 모델 개발

### Week 3-4: API 모델 & 최적화

1. 🤖 Gemini API 모델 구축
2. ⚡ 성능 최적화
3. 📈 하이브리드 모델 개발

### Week 5-6: 자동화 & 배포

1. 🔄 Airflow 파이프라인 구축
2. 📊 모니터링 대시보드
3. 🧪 A/B 테스트 프레임워크

------

## 💡 포트폴리오 차별화 포인트

1. **실제 운영 데이터**: 진짜 블로그 데이터로 실험
2. **다방면 접근**: 전통적 ML + 최신 LLM + 하이브리드
3. **완전한 MLOps**: 개발부터 배포, 모니터링까지
4. **비즈니스 임팩트**: 구체적 성능 개선 수치 제시
5. **확장 가능성**: 다른 플랫폼 적용 가능한 아키텍처



